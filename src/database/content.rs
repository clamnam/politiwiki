//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "content")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub title: Option<String>,
    pub content_type: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub content_body: Option<String>,
    pub images_id: Option<i32>,
    pub created_by_id: Option<i32>,
    pub modified_by_id: Option<i32>,
    pub status: Option<String>,
    pub order_id: Option<i32>,
    pub is_hidden: Option<bool>,
    pub is_deleted: Option<bool>,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::images::Entity",
        from = "Column::ImagesId",
        to = "super::images::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Images,
    #[sea_orm(has_many = "super::pages::Entity")]
    Pages,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::CreatedById",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users2,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::ModifiedById",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users1,
}

impl Related<super::images::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Images.def()
    }
}

impl Related<super::pages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Pages.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
